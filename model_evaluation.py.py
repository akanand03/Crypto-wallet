# -*- coding: utf-8 -*-
"""Data_Mining_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lMH-pdyiKtQG8JxSjKRUh7W6Mbxz5VJ3
"""

import requests
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from datetime import datetime

def evaluate_model(y_true, y_pred):
    """Evaluates the performance of the linear regression model and prints accuracy."""
    mse = mean_squared_error(y_true, y_pred)
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)

    print(f"Mean Squared Error (MSE): {mse}")
    print(f"Mean Absolute Error (MAE): {mae}")
    print(f"R² Score: {r2}")

    return {
        "MSE": mse,
        "MAE": mae,
        "R²": r2
    }

def get_market_chart(coin_id, days):
    """Fetches market data and evaluates the model's performance."""
    response = requests.get(f'https://api.coingecko.com/api/v3/coins/{coin_id}/ohlc?vs_currency=usd&days={days}')

    if response.status_code != 200:
        raise ValueError(f"Failed to fetch OHLC data for {coin_id}. Status code: {response.status_code}")

    ohlc_data = response.json()

    if not ohlc_data or not isinstance(ohlc_data, list):
        raise ValueError(f"OHLC data is empty or not in expected format for {coin_id}")

    ohlc = np.array(ohlc_data)

    if len(ohlc.shape) != 2 or ohlc.shape[1] != 5:
        raise ValueError(f"Expected OHLC data to be 2D with 5 columns (time, open, high, low, close), got shape: {ohlc.shape}")

    # Create a DataFrame for OHLC data
    df = pd.DataFrame(ohlc, columns=['time', 'open', 'high', 'low', 'close'])
    df['time'] = pd.to_datetime(df['time'], unit='ms')

    # Prepare data for modeling: using time and close price
    X = ohlc[:, [0, 4]]  # Time and Close price
    y = ohlc[:, 4]  # Close price

    # Scale the data
    scaler = MinMaxScaler()
    X = scaler.fit_transform(X)

    # Train the model
    model = LinearRegression()
    model.fit(X, y)

    # Make predictions
    y_pred = model.predict(X)

    # Evaluate and print the model's performance
    evaluate_model(y, y_pred)

    return df

# Example usage:
coin_id = 'bitcoin'  # You can change this to any valid coin ID
days = '30'  # Choose the number of days (1, 7, 14, 30, 90, 180, 365)

df = get_market_chart(coin_id, days)